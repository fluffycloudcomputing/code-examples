AWSTemplateFormatVersion: '2010-09-09'
Description: 'Pipeline for Node app'
Parameters:
  BranchName:
    Description: GitHub branch name
    Type: String
    Default: master
  RepositoryName:
    Description: GitHub repository name
    Type: String
    Default: node-app
  GitHubOwner:
    Type: String
    Default: fluffycloudcomputing
  ServiceName:
    Type: String
    Default: backend-api
  GitHubTokenKey:
    Type: String
    Default: /github/oauth/token
  GitHubTokenVersion:
    Type: String
    Default: "1"
Resources:
  pipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - codepipeline.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CodePipelineRole
          PolicyDocument: |
            {
              "Statement": [
                  {
                      "Action": [
                          "iam:PassRole"
                      ],
                      "Resource": "*",
                      "Effect": "Allow",
                      "Condition": {
                          "StringEqualsIfExists": {
                              "iam:PassedToService": [
                                  "cloudformation.amazonaws.com",
                                  "elasticbeanstalk.amazonaws.com",
                                  "ec2.amazonaws.com",
                                  "ecs-tasks.amazonaws.com"
                              ]
                          }
                      }
                  },
                  {
                      "Action": [
                          "codecommit:CancelUploadArchive",
                          "codecommit:GetRepository",
                          "codecommit:GetBranch",
                          "codecommit:GetCommit",
                          "codecommit:GetUploadArchiveStatus",
                          "codecommit:UploadArchive"
                      ],
                      "Resource": "*",
                      "Effect": "Allow"
                  },
                  {
                      "Action": [
                          "codedeploy:CreateDeployment",
                          "codedeploy:GetApplication",
                          "codedeploy:GetApplicationRevision",
                          "codedeploy:GetDeployment",
                          "codedeploy:GetDeploymentConfig",
                          "codedeploy:RegisterApplicationRevision"
                      ],
                      "Resource": "*",
                      "Effect": "Allow"
                  },
                  {
                      "Action": [
                          "codestar-connections:UseConnection"
                      ],
                      "Resource": "*",
                      "Effect": "Allow"
                  },
                  {
                      "Action": [
                          "elasticbeanstalk:*",
                          "ec2:*",
                          "elasticloadbalancing:*",
                          "autoscaling:*",
                          "cloudwatch:*",
                          "s3:*",
                          "sns:*",
                          "cloudformation:*",
                          "rds:*",
                          "sqs:*",
                          "ecs:*"
                      ],
                      "Resource": "*",
                      "Effect": "Allow"
                  },
                  {
                      "Action": [
                          "lambda:InvokeFunction",
                          "lambda:ListFunctions"
                      ],
                      "Resource": "*",
                      "Effect": "Allow"
                  },
                  {
                      "Action": [
                          "opsworks:CreateDeployment",
                          "opsworks:DescribeApps",
                          "opsworks:DescribeCommands",
                          "opsworks:DescribeDeployments",
                          "opsworks:DescribeInstances",
                          "opsworks:DescribeStacks",
                          "opsworks:UpdateApp",
                          "opsworks:UpdateStack"
                      ],
                      "Resource": "*",
                      "Effect": "Allow"
                  },
                  {
                      "Action": [
                          "cloudformation:CreateStack",
                          "cloudformation:DeleteStack",
                          "cloudformation:DescribeStacks",
                          "cloudformation:UpdateStack",
                          "cloudformation:CreateChangeSet",
                          "cloudformation:DeleteChangeSet",
                          "cloudformation:DescribeChangeSet",
                          "cloudformation:ExecuteChangeSet",
                          "cloudformation:SetStackPolicy",
                          "cloudformation:ValidateTemplate"
                      ],
                      "Resource": "*",
                      "Effect": "Allow"
                  },
                  {
                      "Action": [
                          "codebuild:BatchGetBuilds",
                          "codebuild:StartBuild"
                      ],
                      "Resource": "*",
                      "Effect": "Allow"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "devicefarm:ListProjects",
                          "devicefarm:ListDevicePools",
                          "devicefarm:GetRun",
                          "devicefarm:GetUpload",
                          "devicefarm:CreateUpload",
                          "devicefarm:ScheduleRun"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "servicecatalog:ListProvisioningArtifacts",
                          "servicecatalog:CreateProvisioningArtifact",
                          "servicecatalog:DescribeProvisioningArtifact",
                          "servicecatalog:DeleteProvisioningArtifact",
                          "servicecatalog:UpdateProduct"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "cloudformation:ValidateTemplate"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "ecr:DescribeImages"
                      ],
                      "Resource": "*"
                  }
              ],
              "Version": "2012-10-17"
            }
  AppPipelineWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Sub "{{resolve:ssm:${GitHubTokenKey}:${GitHubTokenVersion}}}"
      Filters:
        - JsonPath: $.ref
          MatchEquals: 'refs/heads/{Branch}'
      TargetPipeline: !Ref AppPipeline
      TargetAction: SourceAction
      Name: !Sub ${Environment}-${ServiceName}-pipeline-webhook
      TargetPipelineVersion: !GetAtt AppPipeline.Version
      RegisterWithThirdParty: true
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
      Name: !Sub ${Environment}-${ServiceName}-build
      ServiceRole:
        Fn::ImportValue: !Sub "${CodebuildRoleStack}-Codebuild-Role-Arn"
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub build-files/buildspec.yaml
  CodeBuildDeployProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
      Name: !Sub ${Environment}-${ServiceName}-deploy
      ServiceRole:
        Fn::ImportValue: !Sub "${CodebuildRoleStack}-Codebuild-Role-Arn"
      SecondarySources:
        - Type: CODECOMMIT
          Location: https://git-codecommit.ca-central-1.amazonaws.com/v1/repos/infrastructure-config
          SourceIdentifier: ConfigSourceOutput
      Source:
        Type: CODEPIPELINE
        SourceIdentifier: SourceOutput
        BuildSpec: !Sub build-files/buildspec-deploy.yaml

  AppPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties: 
      ArtifactStore: 
        Location: codepipeline-ca-central-1-613713259889
        Type: S3
      Name: !Sub "${Environment}-${ServiceName}-pipeline"
      RestartExecutionOnUpdate: false
      RoleArn: !GetAtt pipelineRole.Arn
      Stages: 
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref RepositoryName
                Branch: !Ref BranchName
                OAuthToken: !Sub "{{resolve:ssm:${GitHubTokenKey}:${GitHubTokenVersion}}}"
                PollForSourceChanges: false
              RunOrder: 1
            - Name: ConfigSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: ConfigSourceOutput
              Configuration:
                RepositoryName: infrastructure-config
                BranchName: master
                PollForSourceChanges: false
                OutputArtifactFormat: CODEBUILD_CLONE_REF
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              RunOrder: 1     
              InputArtifacts:
                - Name: SourceOutput 
              Configuration:
                ProjectName: !Ref CodeBuildProject
                EnvironmentVariables: !Sub '[{"name":"APP_ENV","value":"${Environment}","type":"PLAINTEXT"}]'
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              RunOrder: 1
              InputArtifacts:
                - Name: SourceOutput 
                - Name: ConfigSourceOutput
              Configuration:
                ProjectName: !Ref CodeBuildDeployProject
                PrimarySource: SourceOutput
                EnvironmentVariables: !Sub '[{"name":"CLUSTER_NAME","value":"${ClusterName}","type":"PLAINTEXT"},{"name":"SERVICE_NAME","value":"${ServiceName}","type":"PLAINTEXT"},{"name":"APP_ENV","value":"${Environment}","type":"PLAINTEXT"}]'        